
pywws.ToUnderground
*******************

Post weather update to WeatherUnderground

   usage: python ToUnderground.py [options] data_dir
   options are:
    -h or --help     display this help
    -c or --catchup  upload all data since last upload (up to 4 weeks)
    -v or --verbose  increase amount of reassuring messages
   data_dir is the root directory of the weather data


Introduction
============

Weather Underground is a USA based web site that gathers weather data
from stations around the world. This module enables pywws to upload
readings to Weather Underground.


Configuration
=============

If you haven't already done so, visit the Weather Underground web site
and create a member account for yourself. Then go to the 'Personal
Weather Stations' page and follow the 'new weather station' link. Fill
in all the required details, then click on 'submit'.

Copy your 'station ID' and password to a new ``[underground]`` section
in your ``weather.ini`` configuration file:

   [underground]
   password = secret
   station = ABCDEFG1A

Remember to stop all pywws software before editing ``weather.ini``.

Test your configuration by running ``ToUnderground.py`` (replace
``data_dir`` with your weather data directory):

   python pywws/ToUnderground.py -vvv data_dir

This should show you the data string that is uploaded and then a
'success' message.


Upload old data
===============

Now you can upload your last 7 days' data. Edit your ``weather.ini``
file and remove the ``last update`` line from the ``[underground]``
section, then run ``ToUnderground.py`` with the catchup option:

   python pywws/ToUnderground.py -c -v data_dir

This may take 20 minutes or more, depending on how much data you have.


Add Weather Underground upload to regular tasks
===============================================

Edit your ``weather.ini`` again, and add ``underground = True`` to the
``[live]``, ``[logged]``, ``[hourly]``, ``[12 hourly]`` or ``[daily]``
section, depending on how often you want to send data. For example:

   [live]
   underground = True
   twitter = []
   plot = []
   text = []

If you set ``underground = True`` in the ``live`` section, pywws will
use Weather Underground's 'Rapid Fire' mode to send a reading every 48
seconds.

Restart your regular pywws program (``Hourly.py`` or ``LiveLog.py``)
and visit the Weather Underground web site to see regular updates from
your weather station.

-[ Classes ]-

+------------+--------------------------------------------------------------------------------------------+
| ``ToUnderg | Upload weather data to Weather Underground.                                                |
| round``(pa |                                                                                            |
| rams, cali |                                                                                            |
| b_data)    |                                                                                            |
+------------+--------------------------------------------------------------------------------------------+

class class pywws.ToUnderground.ToUnderground(params, calib_data)

   Upload weather data to Weather Underground.

   Parameters:
      * **params** (``pywws.DataStore.params``) -- pywws
        configuration.

      * **calib_data** (``pywws.DataStore.calib_store``) --
        'calibrated' data.

   translate_data(current, fixed_data)

      Convert a weather data record to upload format.

      The ``current`` parameter contains the data to be uploaded. It
      should be a 'calibrated' data record, as stored in
      ``pywws.DataStore.calib_store``.

      The ``fixed_data`` parameter contains unvarying data that is
      site dependent, for example an ID code and authentication data.

      Parameters:
         * **current** (*dict*) -- the weather data record.

         * **fixed_data** (*dict*) -- unvarying upload data.

      Returns:
         converted data, or ``None`` if invalid data.

      Return type:
         dict(string)

   Upload(catchup)

      Upload one or more weather data records.

      This method uploads either the most recent weather data record,
      or all records since the last upload (up to 7 days), according
      to the value of ``catchup``.

      It sets the ``last update`` configuration value to the time
      stamp of the most recent record successfully uploaded.

      Parameters:
         * **catchup** (*bool*) -- upload all data since last upload.

      Returns:
         success status

      Return type:
         bool

   RapidFire(data, catchup)

      Upload a 'Rapid Fire' weather data record.

      This method uploads either a single data record (typically one
      obtained during 'live' logging), or all records since the last
      upload (up to 7 days), according to the value of ``catchup``.

      It sets the ``last update`` configuration value to the time
      stamp of the most recent record successfully uploaded.

      The ``data`` parameter contains the data to be uploaded. It
      should be a 'calibrated' data record, as stored in
      ``pywws.DataStore.calib_store``.

      Parameters:
         * **data** (*dict*) -- the weather data record.

         * **catchup** (*bool*) -- upload all data since last upload.

      Returns:
         success status

      Return type:
         bool

pywws.ToUnderground.main(argv=None)
