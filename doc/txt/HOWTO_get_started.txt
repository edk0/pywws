Python software for USB Wireless WeatherStations (pywws).
http://code.google.com/p/pywws/

How to get started with pywws.
==============================

1. Download and unpack the pywws software.
------------------------------------------

Create a directory for all your weather related files and change to it. For
example (on a Linux or similar operating system):

mkdir ~/weather
cd ~/weather

Visit the pywws website http://code.google.com/p/pywws/ and download one of
the .tar.gz or .zip files. Put it in your weather directory, then extract
all the files, for example:

tar zxvf pywws-10.08_r235.tar.gz
unzip pywws-10.08_r235.zip

2. Install dependencies.
------------------------

Python 2.4+ - http://python.org/
'libusb' 0.1.12 - http://libusb.sf.net/
'PyUSB' 0.4.x - http://pyusb.berlios.de/

You should be able to install these using your operating system's package
manager. This is a lot easier than downloading and compiling the source
files from the project websites.

3. Test the weather station connection.
---------------------------------------

Connect the weather station (if not already connected) then run the
TestWeatherStation.py program. Change to the pywws directory first.
For example:

cd pywws-10.08_r235
python TestWeatherStation.py

If everything is working correctly, this should dump a load of numbers to
the screen, for example:

0000 55 aa ff ff ff ff ff ff ff ff ff ff ff ff ff ff 05 20 01 51 11 00 00 00 81 00 00 0f 00 00 60 55
0020 ea 27 a0 27 00 00 00 00 00 00 00 10 10 12 13 45 41 23 c8 00 32 80 47 2d 2c 01 2c 81 5e 01 1e 80
0040 96 00 c8 80 a0 28 80 25 a0 28 80 25 03 36 00 05 6b 00 00 0a 00 f4 01 18 03 00 00 00 00 00 00 00
0060 00 00 4e 1c 63 0d 2f 01 73 00 7a 01 47 80 7a 01 47 80 e4 00 00 00 71 28 7f 25 bb 28 bd 25 eb 00
0080 0c 02 84 00 0e 01 e3 01 ab 03 dc 17 00 10 08 21 08 54 10 03 07 22 18 10 08 11 08 30 10 04 21 16
00a0 26 08 07 24 17 17 08 11 01 06 10 09 06 30 14 29 09 01 06 07 46 09 06 30 14 29 09 01 06 07 46 08
00c0 08 31 14 30 10 05 14 15 27 10 01 26 20 47 09 01 23 05 13 10 01 26 20 47 09 01 23 05 13 10 02 22
00e0 11 06 10 02 22 11 06 08 07 07 19 32 08 12 13 22 32 08 09 07 08 48 01 12 05 04 43 10 02 22 14 43

There are several reasons why this might not work. Most likely is a
'permissions' problem. This can be tested by running the command as root:

sudo python TestWeatherStation.py

If this works then you may be able to allow your normal user account to access
the weather station by setting up a 'udev' rule. See the compatibility wiki
page http://code.google.com/p/pywws/wiki/Compatibility for more details.

If you have any other problem, please ask for help on the pywws mailing list:
http://groups.google.com/group/pywws

4. Log your weather station data.
---------------------------------

First, choose a directory to store all your weather station data. This will
be written to quite frequently, so a disk drive is preferable to a memory
stick, as these have a limited number of writes. In most cases your home
directory is suitable, for example:

mkdir ~/weather/data

This directory is referred to elsewhere in the pywws documentation as your
data directory.

Make sure your computer has the right date & time, and time zone, as these
are used to label the weather station data. If you haven't already done so,
it's worth setting up NTP to synchronise your computer to a 'time server'.

The first time you run LogData.py it will take several minutes, as it will
copy all the data stored in your station's memory. The LogData.py program
has a 'verbose' option that increases the amount of messages it displays
while running. This is useful when running it manually, for example:

python pywws/LogData.py -vvv ~/weather/data

(Replace ~/weather/data with your data directory, if it's different.)

You should now have some data files you can look at. For example:

more ~/weather/data/weather/raw/2010/2010-10/2010-10-12.txt

(Replace the year, month and day with ones that you have data for.)

5. Convert old EasyWeather data (optional).
-------------------------------------------

If you had been running EasyWeather before deciding to use pywws, you can
convert the data EasyWeather had logged to the pywws format. Find your
EasyWeather.dat file and then convert it:

python EWtoPy.py EasyWeather.dat ~/weather/data

6. Set some configuration options.
----------------------------------

After running LogData.py there should be a configuration file in your data
directory called 'weather.ini'. Open this with a text editor. You should
find something like the following:

[fixed]
pressure offset = 7.4

The line [fixed] marks the start of a section (called '[fixed]'), and the
following line is an entry called 'pressure offset' in that section.

You need to add a new section called '[config]' with an entry called
'day end hour'. This tells pywws what convention you want to use when
calculating daily summary data. In the UK, the 'meteorological day' is
usually from 21:00 to 21:00 GMT (22:00 to 22:00 BST during summer), so I use
a day end hour value of 21. In other countries a value of 24 (or 0) might be
more suitable. Note that the value is set in local winter time. You do not
need to change it when daylight savings time is in effect.

After editing, your weather.ini file should look something like this:

[fixed]
pressure offset = 7.4

[config]
day end hour = 21

For more detail on the configuration file options, see the weather_ini.html
file in your pywws/doc directory.

7. Process the raw data.
------------------------

LogData.py just copies the raw data from the weather station. To do something
useful with that data you probably need hourly, daily and monthly summaries.
These are created by the Process.py program. For example:

python pywws/Process.py ~/weather/data

You should now have some processed files to look at:

more ~/weather/data/weather/daily/2010/2010-10-01.txt

If you ever change your 'day end hour' configuration setting, you will need
to reprocess all your weather data. You can do this by running the
Reprocess.py program:

python Reprocess.py ~/weather/data

8. Set the weather station logging interval.
--------------------------------------------

Your weather station probably left the factory with a 30 minute logging
interval. This enables the station to store about 11 weeks of data. Most
pywws users set up their computers to read data from the station every hour,
and only need the station to store enough data to cover computer failures.
The shortest interval that can be set is 5 minutes, which still allows 2 weeks
of storage. Use the SetWeatherStation.py to set the interval:

python SetWeatherStation.py -r 5

You are now ready to set up hourly or live logging, as described in another
HOWTO file.

9. Read the documentation.
--------------------------

The doc directory in your pywws directory contains several HTML files, as
well as the HOWTO guide text files. The HTML files can be read with any
web browser. Start with index.html and follow links from there.

More detailed HTML documentation of each Python module can be created from
the source files by running the AutoDoc.py program:

python ./AutoDoc.py

(Note that there is currently a bug in AutoDoc.py that means you have to
prefix its name with ./ when running it.)

Alternatively, you can read the documentation directly with pydoc. For
example:

pydoc pywws.WeatherStation

Finally, you can run pydoc as a mini web server. For example, to use port
number 1234:

pydoc -p 1234 &

You can then point a web browser at http://localhost:1234/ to read
documentation on all python modules installed on your computer.


Comments or questions? Please subscribe to the pywws mailing list
http://groups.google.com/group/pywws and let us know.
