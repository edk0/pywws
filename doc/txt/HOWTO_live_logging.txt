                Python software for USB Wireless WeatherStations

How to set up 'live' logging with pywws.

  1. Introduction.

   There are two quite different modes of operation with pywws. Traditionally
   the Hourly.py program would be run at regular intervals (usually an hour)
   from cron. This is suitable for fairly static websites, but more frequent
   updates can be useful for sites such as Weather Underground
   (http://www.wunderground.com/). The newer LiveLog.py program runs
   continuously and can upload data every 48 seconds.

  2. Getting started.

   First of all, you need to install pywws and make sure it can get data from
   your weather station. See HOWTO_get_started.html for details.

   Try running LiveLog.py from the command line, with a high level of
   verbosity so you can see what's happening:

 python LiveLog.py -vvv ~/weather/data

   Within 48 seconds you should see a 'live_data synchronised' message, and
   within the next five minutes (assuming you have set a 5 minute logging
   interval) you should see a 'live_data new ptr' message. Let LiveLog.py run
   for a few minutes longer, then kill the process by typing 'Ctrl+C'.

  3. Configuring periodic tasks.

   Open your weather.ini file with a text editor. You should have a '[live]'
   section similar to the following:

 [live]
 underground = False
 plot = []
 text = []
 twitter = []

   This section specifies what pywws should do every time it gets a new
   reading from the weather station, i.e. every 48 seconds. The 'underground'
   entry should be a boolean value (True or False) that enables 'Rapid Fire'
   uploads to Weather Underground. The 'plot' and 'text' entries are lists of
   template files for plots and text files to be uploaded to your web site,
   and the 'twitter' entry is a list of templates for messages to be posted
   to Twitter. You should probably leave all of theses lists blank.

   If you don't already have them, create three more sections in your
   weather.ini file: '[hourly]', '[12 hourly]' and '[daily]'. These sections
   should have the same entries as the '[live]' section, and specify what to
   do every hour, twice daily and once per day. Add the names of your
   template files to the appropriate entries, for example:

 [hourly]
 underground = False
 twitter = ['tweet.txt']
 plot = ['7days.png.xml', '24hrs.png.xml', 'rose_12hrs.png.xml']
 text = ['24hrs.txt', '6hrs.txt', '7days.txt']

 [12 hourly]
 underground = False
 twitter = []
 plot = []
 text = []

 [daily]
 underground = False
 twitter = []
 plot = ['28days.png.xml']
 text = ['allmonths.txt']

   If you enable 'underground' in any of these sections then all logged data
   since the previous upload will be uploaded, giving Weather Underground a
   full history. You don't need to do this if you have enabled 'live'
   uploading.

  4. Run in the background.

   In order to have LiveLog.py carry on running after you finish using your
   computer it needs to be run as a 'background job'. On most Linux / UNIX
   systems you can do this by putting an ampersand ('&') at the end of the
   command line. For example:

 python LiveLog.py ~/weather/data &

   However, it would be useful to know what went wrong if the program crashes
   for any reason. LiveLog.py can store its messages in a log file, specified
   with the -l option:

 python LiveLog.py -v -l ~/weather/data/pywws.log ~/weather/data &

  5. Automatic restarting.

   There are various ways of configuring a Linux system to start a program
   when the machine boots up. Typically these involve putting a file in
   /etc/init.d/, which requires root priviledges. A slightly harder problem
   is ensuring a program restarts if it crashes. My solution to both problems
   is to run the following script from cron, every ten minutes.

 #!/bin/sh

 pidfile=/var/run/pywws.pid
 datadir=/data/weather
 logfile=$datadir/live_logger.log

 # exit if process is running
 [ -f $pidfile ] && kill -0 `cat $pidfile` && exit

 # email last few lines of the logfile to see why it died
 if [ -f $logfile ]; then
   log=/var/log/log-weather
   tail -40 $logfile >$log
   /home/jim/scripts/email-log.sh $log "weather log"
   rm $log
   fi

 # restart process
 python /home/jim/weather/devel/LiveLog.py -v -l $logfile $datadir &
 echo $! >$pidfile

   This stores the process id of the running LiveLog.py in pidfile. If the
   process is running, the script does nothing. If the process has crashed,
   it emails the last 40 lines of the log file to me (using a script that
   creates a message and passes it to sendmail) and then restarts LiveLog.py.
   You'll need to edit this quite a lot to suit your file locations and so
   on, but it gives some idea of what to do.

   Comments or questions? Please subscribe to the pywws mailing list
   http://groups.google.com/group/pywws and let us know.

     ----------------------------------------------------------------------

   Python software for USB Wireless WeatherStations (c) Jim Easterbrook.
